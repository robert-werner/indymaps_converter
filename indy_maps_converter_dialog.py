# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IndyMapsConverterDialog
                                 A QGIS plugin
 This plugin imports/exports the QGIS project to the IndyMaps format (*.imx)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-08-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Leonid Kolesnichenko
        email                : xperience439@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from cbor2 import load
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import QgsProject, QgsCoordinateReferenceSystem, QgsRectangle, QgsReferencedRectangle, QgsPointXY, QgsGeometry, QgsPolygon, QgsVectorLayer, QgsFeature
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'indy_maps_converter_dialog_base.ui'))


class IndyMapsConverterDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(IndyMapsConverterDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.importButton.clicked.connect(self.import_imx)
        self.exportButton.clicked.connect(self.export_imx)

        self.canvas = iface.mapCanvas()
        self.iface = iface

    def import_imx(self):
        imx_path = self.inputFileQgsWidget.filePath()

        project = QgsProject.instance()
        crs = QgsCoordinateReferenceSystem('EPSG:4326')


        with open(imx_path, 'rb') as fp:
            obj = load(fp)
            border = obj['borders'][0]
            classes = obj['classes']
            settings = obj['settings']

            xs = [pt[0] / settings['from_degs_mul'] for pt in border]
            ys = [pt[1] / settings['from_degs_mul'] for pt in border]

            # Compute min and max for x and y
            xmin, xmax = min(xs), max(xs)
            ymin, ymax = min(ys), max(ys)

            rectangle = QgsRectangle(xmin, ymin, xmax, ymax)

            referenced_extent = QgsReferencedRectangle(rectangle, crs)

            project.viewSettings().setPresetFullExtent(referenced_extent)

            self.canvas.refresh()

            for cls in classes:
                if cls['type'] == 0: # Then it is None, continue iteration
                    continue
                if cls['type'] == 1: # Then it is point
                    print(cls['id'], ': Points')
                if cls['type'] == 2: # Then it is line
                    print(cls['id'], ': Lines')
                if cls['type'] == 3: # Then it is multipolygon
                    print(cls['id'], ': Polygons')



    def export_imx(self):
        ...