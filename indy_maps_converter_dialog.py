# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IndyMapsConverterDialog
                                 A QGIS plugin
 This plugin imports/exports the QGIS project to the IndyMaps format (*.imx)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-08-03
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Leonid Kolesnichenko
        email                : xperience439@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtCore import QMetaType
from PyQt5.QtGui import QColor
from cbor2 import load
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.core import QgsProject, Qgis, QgsField, QgsCoordinateReferenceSystem, QgsRectangle, QgsReferencedRectangle, QgsPointXY, QgsGeometry, QgsFields, QgsVectorLayer, QgsFeature
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'indy_maps_converter_dialog_base.ui'))


class IndyMapsConverterDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(IndyMapsConverterDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.importButton.clicked.connect(self.import_imx)
        self.exportButton.clicked.connect(self.export_imx)

        self.canvas = iface.mapCanvas()
        self.iface = iface

    def import_imx(self):
        imx_path = self.inputFileQgsWidget.filePath()

        project = QgsProject.instance()
        crs = QgsCoordinateReferenceSystem('EPSG:4326')


        with open(imx_path, 'rb') as fp:
            obj = load(fp)
            border = obj['borders'][0]
            classes = obj['classes']
            settings = obj['settings']

            xs = [pt[1] / settings['from-degs-mul'] for pt in border]
            ys = [pt[0] / settings['from-degs-mul'] for pt in border]

            # Compute min and max for x and y
            xmin, xmax = min(xs), max(xs)
            ymin, ymax = min(ys), max(ys)

            rectangle = QgsRectangle(xmin, ymin, xmax, ymax)

            referenced_extent = QgsReferencedRectangle(rectangle, crs)

            project.viewSettings().setPresetFullExtent(referenced_extent)

            self.canvas.refresh()

            for cls in classes:
                if cls['shape'] == 1: # Then it is point
                    layer_name = cls['id']
                    layer = QgsVectorLayer("Point?crs=EPSG:4326",
                                           layer_name,
                                           "memory")
                    symbol = layer.renderer().symbol()
                    symbol.setSizeUnit(Qgis.RenderUnit.Millimeters)  # switch to millimeters
                    rgba_color = (cls['fill-color'] >> 16) & 0xff, (cls['fill-color'] >> 8) & 0xff, (cls['fill-color']) & 0xff, (cls['fill-color'] >> 24) & 0xff
                    symbol.setColor(QColor.fromRgb(*rgba_color))
                    symbol.setSize(cls['width'])
                    for obj in cls['objects']:
                        geom = obj[0][0][0]
                        attribs = obj[-1] # TODO: fix when correct imx will be sent


                        qgs_point = QgsPointXY(geom[1] / settings['from-degs-mul'],
                                               geom[0] /settings['from-degs-mul'])
                        qgs_geometry = QgsGeometry.fromPointXY(qgs_point)

                        for attrib in attribs.items():
                            layer.dataProvider().addAttributes([
                                QgsField(attrib[0], QMetaType.Type.QString)
                            ])
                        layer.updateFields()

                        feature = QgsFeature(layer.fields())

                        attr_list = [attribs.get(field.name()) for field in layer.fields()]
                        feature.setAttributes(attr_list)

                        feature.setGeometry(qgs_geometry)

                        layer.dataProvider().addFeature(feature)
                        QgsProject.instance().addMapLayer(layer)
                        self.canvas.refresh()
                if cls['shape'] == 2: # Then it is line
                    print(cls['id'], ': Lines')
                    layer_name = cls['id']
                    layer = QgsVectorLayer("LineString?crs=EPSG:4326",
                                           layer_name,
                                           "memory")
                    symbol = layer.renderer().symbol()
                    symbol.setWidthUnit(Qgis.RenderUnit.Millimeters)  # switch to millimeters
                    rgba_color = (cls['line-color'] >> 16) & 0xff, (cls['line-color'] >> 8) & 0xff, (cls['line-color']) & 0xff, (cls['line-color'] >> 24) & 0xff
                    symbol.setColor(QColor.fromRgb(*rgba_color))
                    symbol.setWidth(cls['width'])

                    for obj in cls['objects']:
                        attribs = obj[-1]
                        points = []
                        geom = obj[0]
                        starting_point = geom[0][0]
                        for x, y in geom[0][1:]:
                            x = (starting_point[0] + x) / settings['from-degs-mul']
                            y = (starting_point[1] + y) / settings['from-degs-mul']
                            points.append(QgsPointXY(y, x))

                        qgs_geometry = QgsGeometry.fromPolylineXY(points)

                        for attrib in attribs.items():
                            layer.dataProvider().addAttributes([
                                QgsField(attrib[0], QMetaType.Type.QString)
                            ])
                        layer.updateFields()

                        feature = QgsFeature(layer.fields())

                        attr_list = [attribs.get(field.name()) for field in layer.fields()]
                        feature.setAttributes(attr_list)

                        feature.setGeometry(qgs_geometry)

                        layer.dataProvider().addFeature(feature)
                        QgsProject.instance().addMapLayer(layer)
                        self.canvas.refresh()
                if cls['shape'] == 3: # Then it is multipolygon
                    print(cls['id'], ': Polygons')
                    layer_name = cls['id']
                    layer = QgsVectorLayer("Polygon?crs=EPSG:4326",
                                           layer_name,
                                           "memory")
                    symbol = layer.renderer().symbol()
                    rgba_color = (cls['fill-color'] >> 16) & 0xff, (cls['fill-color'] >> 8) & 0xff, (cls['fill-color']) & 0xff, (cls['fill-color'] >> 24) & 0xff
                    symbol.setColor(QColor.fromRgb(*rgba_color))  # Fill color
                    symbol.symbolLayer(0).setStrokeWidth(cls['width'])  # in millimeters

                    for obj in cls['objects']:
                        attribs = obj[-1]
                        points = []
                        geom = obj[0]
                        starting_point = geom[0][0]
                        points.append(QgsPointXY(starting_point[1] / settings['from-degs-mul'], starting_point[0] / settings['from-degs-mul']))
                        for x, y in geom[0][1:]:
                            x = (starting_point[0] + x) / settings['from-degs-mul']
                            y = (starting_point[1] + y) / settings['from-degs-mul']
                            points.append(QgsPointXY(y, x))

                        qgs_geometry = QgsGeometry.fromPolygonXY([points])

                        for attrib in attribs.items():
                            layer.dataProvider().addAttributes([
                                QgsField(attrib[0], QMetaType.Type.QString)
                            ])
                        layer.updateFields()

                        feature = QgsFeature(layer.fields())

                        attr_list = [attribs.get(field.name()) for field in layer.fields()]
                        feature.setAttributes(attr_list)

                        feature.setGeometry(qgs_geometry)

                        layer.dataProvider().addFeature(feature)
                        QgsProject.instance().addMapLayer(layer)
                        self.canvas.refresh()



    def export_imx(self):
        ...